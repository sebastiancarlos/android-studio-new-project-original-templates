#! /usr/bin/env bash

green="\033[32m"
bold="\033[1m"
red="\033[31m"
reset="\033[0m"


SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
if [[ -L "${BASH_SOURCE[0]}" ]]; then
    SCRIPT_DIR="$(readlink "${BASH_SOURCE[0]}")"
    SCRIPT_DIR="$( cd "$( dirname "${SCRIPT_DIR}" )" >/dev/null 2>&1 && pwd )"
fi

# get all non-hidden folders in the current dir (these are the templates)
templates=($(find $SCRIPT_DIR -maxdepth 1 -mindepth 1 -type d -not -name ".*"))

function usage () {
  echo -e "${bold}Usage:${reset} ${green}./android-new-project${reset} ${bold}<template-name>${reset} ${bold}<project-name>${reset}"
  echo -e "       ${green}./android-new-project${reset} ${bold}--list/-l${reset}"
  echo -e "       ${green}./android-new-project${reset} ${bold}--help/-h${reset}"
  echo -e ""
  echo -e "  - ${bold}<template-name>${reset} is the name of the template you want to use."
  echo -e "  - ${bold}<project-name>${reset} is the name of the project you want to create. A folder"
  echo -e "    with this name will be created in the current directory, and the template"
  echo -e "    files will be copied into it."
  echo -e "    - This name will be converted to lowercase and CapitalizedCase, and used to name folders"
  echo -e "      and replace content accordingly."
  echo -e "  - ${bold}--list/-l${reset} will list the available templates."
  echo -e "  - ${bold}--help/-h${reset} prints this help."
  echo ""
  echo -e "${bold}Available templates:${reset}"
  for template in ${templates[@]}; do
    echo "  - $(basename $template)"
  done
}

# on no arguments, or --help/-h, print usage
if [[ $# -eq 0 ]] || [[ $1 == "--help" ]] || [[ $1 == "-h" ]]; then
  usage
  exit 0
fi

# on --list/-l, print available templates
if [[ $1 == "--list" ]] || [[ $1 == "-l" ]]; then
  echo -e "${bold}Available templates:${reset}"
  for template in ${templates[@]}; do
    echo "$(basename $template)"
  done
  exit 0
fi

# on no project name, print usage
if [[ $# -eq 1 ]]; then
  echo -e "${bold}${red}Error:${reset} No project name specified."
  echo 
  usage
  exit 1
fi

# on invalid template name, print usage
if [[ ! -d $SCRIPT_DIR/$1 ]]; then
  echo -e "${bold}${red}Error:${reset} Invalid template name."
  echo 
  usage
  exit 1
fi

# if destination folder already exists, print error
if [[ -d $2 ]]; then
  echo -e "${bold}${red}Error:${reset} A folder with the name ${bold}$2${reset} already exists."
  exit 1
fi

# create destination folder and copy template files
mkdir $2
cp -r $SCRIPT_DIR/$1/* $2

# get lowercase and capitalized versions of project name
lowercase=$(echo $2 | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]')
capitalized=$(echo $2 | sed -E 's/[^a-zA-Z0-9]+/\n/g' | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}' | tr -d '\n')

# also lowercase version of template name
lowercase_template=$(echo $1 | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]')

# replace all occurences of template name with project name (both in file names
# and contents, both lowerscase and CapitalizedCase) in the destination folder
files_to_rename=$(find $2 -name "*$lowercase_template*")
for file in $files_to_rename; do
  new_file=$(echo $file | sed "s/$lowercase_template/$lowercase/g")
  mv $file $new_file
done
for file in $(find $2 -type f); do
  sed -E -i -e "s/$lowercase_template/$lowercase/g" -e "s/$1/$capitalized/g" $file
done

# print message on success
if [[ $? -eq 0 ]]; then
  echo -e "${bold}${green}Success:${reset} Project ${bold}$2${reset} created from template ${bold}$1${reset}."
fi
